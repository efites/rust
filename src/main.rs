use screenshots::Screen;
use image::{ImageBuffer, Rgba};
use std::path::Path;
use std::time::{SystemTime, UNIX_EPOCH};
use std::thread;
use std::time::Duration;

#[derive(Debug, Clone)]
struct CursorPosition {
    x: i32,
    y: i32,
}

struct CaptureManager {
    output_dir: String,
}

impl CaptureManager {
    fn new(output_dir: &str) -> Self {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        let path = Path::new(output_dir);
        if !path.exists() {
            std::fs::create_dir_all(path).expect("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é");
            println!("üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {}", output_dir);
        }

        CaptureManager {
            output_dir: output_dir.to_string(),
        }
    }

    fn generate_filename(&self, x: i32, y: i32) -> String {
        let timestamp = SystemTime::now()
            .duration_since(UNIX_EPOCH)
            .unwrap()
            .as_millis();

        format!(
            "{}/capture_{}_{}_{}.png",
            self.output_dir, timestamp, x, y
        )
    }

    fn capture_area_around_cursor(&self, x: i32, y: i32, radius: i32) -> Result<String, Box<dyn std::error::Error>> {
        println!("üéØ –ó–∞—Ö–≤–∞—Ç –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –ø–æ–∑–∏—Ü–∏–∏: ({}, {}) —Ä–∞–¥–∏—É—Å: {}", x, y, radius);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        let screens = Screen::all()?;
        if screens.is_empty() {
            return Err("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞".into());
        }

        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω (–ø–µ—Ä–≤—ã–π)
        let screen = &screens[0];
        let screen_info = screen.display_info;

        println!("üì∫ –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Ä–∞–Ω: {}x{}", screen_info.width, screen_info.height);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∑–∞—Ö–≤–∞—Ç–∞
        let capture_x = (x - radius).max(0);
        let capture_y = (y - radius).max(0);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
        let end_x = (x + radius).min(screen_info.width as i32);
        let end_y = (y + radius).min(screen_info.height as i32);

        let actual_width = (end_x - capture_x).max(1);
        let actual_height = (end_y - capture_y).max(1);

        println!("üì∑ –û–±–ª–∞—Å—Ç—å –∑–∞—Ö–≤–∞—Ç–∞: ({}, {}) —Ä–∞–∑–º–µ—Ä: {}x{}",
                 capture_x, capture_y, actual_width, actual_height);

        // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å
        let capture = screen.capture_area(capture_x, capture_y, actual_width as u32, actual_height as u32)?;

        // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        let image_buffer = ImageBuffer::from_raw(
            capture.width() as u32,
            capture.height() as u32,
            capture.to_vec()
        ).ok_or("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ö–≤–∞—Ç–∞")?;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        let filename = self.generate_filename(x, y);
        image_buffer.save(&filename)?;

        println!("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {}", filename);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ
        self.analyze_center_color(&image_buffer);

        Ok(filename)
    }

    fn analyze_center_color(&self, image: &ImageBuffer<Rgba<u8>, Vec<u8>>) {
        let center_x = image.width() / 2;
        let center_y = image.height() / 2;

        if center_x < image.width() && center_y < image.height() {
            let pixel = image.get_pixel(center_x, center_y);
            let color = [pixel[0], pixel[1], pixel[2], pixel[3]];

            println!("üé® –¶–≤–µ—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ: RGB({}, {}, {})", color[0], color[1], color[2]);
            println!("   –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç: {}", self.approximate_color_name(color[0], color[1], color[2]));
        }
    }

    fn approximate_color_name(&self, r: u8, g: u8, b: u8) -> String {
        match (r, g, b) {
            (r, g, b) if r > 200 && g < 100 && b < 100 => "–ö—Ä–∞—Å–Ω—ã–π".to_string(),
            (r, g, b) if r < 100 && g > 200 && b < 100 => "–ó–µ–ª–µ–Ω—ã–π".to_string(),
            (r, g, b) if r < 100 && g < 100 && b > 200 => "–°–∏–Ω–∏–π".to_string(),
            (r, g, b) if r > 200 && g > 200 && b < 100 => "–ñ–µ–ª—Ç—ã–π".to_string(),
            (r, g, b) if r < 100 && g > 200 && b > 200 => "–ì–æ–ª—É–±–æ–π".to_string(),
            (r, g, b) if r > 200 && g < 100 && b > 200 => "–ü—É—Ä–ø—É—Ä–Ω—ã–π".to_string(),
            (r, g, b) if r > 200 && g > 200 && b > 200 => "–ë–µ–ª—ã–π".to_string(),
            (r, g, b) if r < 50 && g < 50 && b < 50 => "–ß–µ—Ä–Ω—ã–π".to_string(),
            (r, g, b) if r == g && g == b => format!("–°–µ—Ä—ã–π {}", r),
            _ => format!("RGB({}, {}, {})", r, g, b),
        }
    }

    fn print_screen_info(&self) -> Result<(), Box<dyn std::error::Error>> {
        let screens = Screen::all()?;
        println!("üñ•Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —ç–∫—Ä–∞–Ω–æ–≤: {}", screens.len());

        for (i, screen) in screens.iter().enumerate() {
            let info = screen.display_info;
            println!("   –≠–∫—Ä–∞–Ω {}: {}x{} (–ø–æ–∑–∏—Ü–∏—è: {}, {})",
                     i, info.width, info.height, info.x, info.y);
        }

        Ok(())
    }
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ –æ–±–ª–∞—Å—Ç–µ–π —ç–∫—Ä–∞–Ω–∞...");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—Ö–≤–∞—Ç–æ–≤
    let capture_manager = CaptureManager::new("./screenshots");

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Ä–∞–Ω–∞—Ö
    capture_manager.print_screen_info()?;

    println!("\nüí° –ë—É–¥—É—Ç –∑–∞—Ö–≤–∞—á–µ–Ω—ã –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π:");

    // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ (–∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–µ –≤–∞–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
    let test_positions = vec![
        CursorPosition { x: 500, y: 300 },
        CursorPosition { x: 600, y: 400 },
        CursorPosition { x: 700, y: 500 },
        CursorPosition { x: 800, y: 300 },
        CursorPosition { x: 900, y: 400 },
    ];

    for (i, pos) in test_positions.iter().enumerate() {
        println!("   {}. ({}, {})", i + 1, pos.x, pos.y);
    }

    println!("\nüéÆ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞—Ö–≤–∞—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...");
    thread::sleep(Duration::from_secs(3));

    println!("--------------------------------------------------");

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞—Ö–≤–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
    for (i, cursor_pos) in test_positions.iter().enumerate() {
        println!("\nüì∏ –ó–∞—Ö–≤–∞—Ç #{} –∏–∑ {}", i + 1, test_positions.len());

        match capture_manager.capture_area_around_cursor(cursor_pos.x, cursor_pos.y, 50) {
            Ok(filename) => {
                println!("üíæ –£—Å–ø–µ—à–Ω–æ: {}", filename);
            }
            Err(e) => {
                eprintln!("‚ùå –û—à–∏–±–∫–∞: {}", e);
            }
        }

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞—Ö–≤–∞—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
        if i < test_positions.len() - 1 {
            println!("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã...");
            thread::sleep(Duration::from_secs(2));
        }
    }

    println!("\n--------------------------------------------------");
    println!("‚úÖ –í—Å–µ –∑–∞—Ö–≤–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É './screenshots'");

    Ok(())
}